#!/usr/bin/perl

use strictures 2;
use warnings;

use FindBin;
use Net::DNS;

use lib "$FindBin::Bin/../lib";

use Superglue qw( :script :webdriver );

navigate 'https://www.mythic-beasts.com/user/logout';
navigate 'https://www.mythic-beasts.com/user/login';

my $login = '#login-form button[type="submit"]';
if (has_elem $login) {
	fill
	    '#ident' => login('ident'),
	    '#password' => login('password');
	# allow unrestricted / floating IP address
	click elem '#floating-1';
	click $login;
}

my $uk = zone =~ m{\.uk$};
my $eu = zone =~ m{\.eu$};
my $home = 'https://ctrlpanel.mythic-beasts.com/customer/domains/'.zone;
sub go_home {
	navigate $home;
	wait_for sub {
		my $title = page_title;
		error "navigation failed"
		    if $title eq 'Error - Mythic Beasts';
		return $title eq zone." - Mythic Beasts";
	};
}
go_home;

my $status = elem_text 'div.section.top-section :nth-child(3)';
error "domain is not currently registered"
    unless $status =~ m{status\s+registered}i;

my $can_dnssec = has_elem { 'link text' => 'DNS SEC' };
warning "DNSSEC is not available for this TLD"
    unless $can_dnssec; # and has_new_ds


# Although the domain summary page has most of the information we
# need, the fields are not labelled in a convenient way. For contact
# and delegation details it is easier to examine the forms.
#
# It would be nice if we could fill the forms in as we go. The main
# problem with this is the registry lock for non-UK domains: we don't
# want to disable it if we don't need to. So for locked domains that
# need changes we have to go through the forms: first to find out that
# changes are required, then after unlocking the domain, again to
# actually make the changes.
#
# In principle the examination and filling stages could be combined if
# the domain is already unlocked, but we don't bother with that
# optimization. The second stage is skipped if no changes are needed.


sub fettle_flag {
	my ($description, $link, $heading, $blurb, $want) = @_;
	error "missing $description link"
	    unless has_elem { 'partial link text' => $link };
	my $match = $want eq elem_text { xpath =>
	    "//h2[text()='$heading']/../p[contains(text(),'$blurb')]/b"
	};
	verbose_f "%s %s", $description, $match ? "matches" : "differs";
	return $match;
}
# Unlike DNSSEC, we can't use the presence/absence of the lock button
# as an indicator that locking is available, because for .eu locking
# is offered but it doesn't work.
my $locking_match = 1;
my $privacy_match = 1;
if (not $uk and not $eu) {
	$locking_match = fettle_flag 'registration lock',
	    'Domain locking', 'Transfer away', 'Domain is',
	    whois('lock') || 1 ? "locked" : "unlocked"; # default on
	$privacy_match = fettle_flag 'domain privacy',
	    'Domain Privacy', 'Contacts', 'Domain privacy is',
	    whois('privacy') ? 'enabled' : 'disabled'; # default off
}


# compare form contents and fill in correct values, but don't submit it
sub fettle_contacts {
	my $noisy = shift eq 'noisy';
	my $match = 1;

	return $match if not has_contact;

	navigate "$home/contacts";

	my @contact = $uk ? qw(registrant)
	    : $eu ? qw(owner tech)
	    : qw(owner admin billing tech);
	my @field = $uk ? qw(
		org name street0 street1 street2
		city sp pc cc voice email
	) : qw(
		first last org phone fax email
		add1 add2 add3 city county postcode country
	);

	for my $contact (@contact) {
		for my $field (@field) {
			my $old;
			my $new = whois $field;
			my $elem = "#${contact}_${field}";
			if ($field eq 'country' or $field eq 'cc') {
				$old = elem_value "$elem option[selected]";
			} else {
				# no need to find the element twice
				$elem = elem $elem;
				$old = elem_value $elem;
			}
			next if $old eq $new;
			$match = 0;
			notice "$contact $field $old -> $new" if $noisy;
			if ($uk and $field eq 'org') {
				warning_f "this must be fixed via Nominet"
				    if $noisy;
			} elsif ($field eq 'country' or $field eq 'cc') {
				click "$elem option[value='$new']";
			} else {
				fill $elem => $new;
			}
		}
	}
	return $match;
}
my $contacts_match = fettle_contacts 'quiet';
verbose_f "contacts %s", $contacts_match ? "match" : "differ";


navigate "$home/nameservers";
for (my $i = 0; ; $i++) {
	my $ns = elem_value "form input[name='ns$i']";
	my $ip = elem_value "form input[name='ip$i']";
	last if not $ns;
	old_ns $ns, $ip;
}


# TODO: At the moment the current DS records are not available when
# the domain is locked, so this will think there aren't any. If the
# domain actually has DS records, $ds_match will end up false, and we
# will continue to the update stage...

my $old_ds_tr = '//h2[text()="DS Records"]/../table/tbody/tr';
sub old_ds_tr {
	my $tr = shift;
	my $tag = elem_value sub_elem $tr, "input[name='keytag']";
	my $algo = elem_value sub_elem $tr,
	    "select[name='algorithm'] option[selected]";
	my $dt = elem_value sub_elem $tr,
	    "select[name='digesttype'] option[selected]";
	my $hash = elem_value sub_elem $tr, "input[name='digest']";
	return Net::DNS::RR->new(
		name => zone,
		type => 'DS',
		keytag => $tag,
		algorithm => $algo,
		digtype => $dt,
		digest => $hash,
	    );
}
my %old_ds;
if ($can_dnssec) {
	navigate "$home/dnssec";
	for my $tr (elems { xpath => $old_ds_tr }) {
		my $ds = old_ds_tr $tr;
		old_ds $ds;
		$old_ds{$ds->rdstring} = ();
	}
}


my ($ns_match,$ds_match) = delegation_matches;


exit if $locking_match
    and $privacy_match
    and $contacts_match
    and $ns_match
    and $ds_match;


my $lock_button = "form input[type='submit'][value='lock']";
my $unlock_button = "form input[type='submit'][value='unlock']";
my $need_lock = 0; # TODO DS
while (not $uk and not $eu) {
	navigate "$home/auth-lock";
	my @elems = elems $unlock_button;
	last unless @elems;
	notice "unlocking registration";
	# TODO: This is a workaround for the missing DS records when
	# the domain is locked: we unlock the domain when we would
	# prefer not to. This can be reverted when the web site is fixed.
	if (not_really and $ds_match) {
		notice "not really!";
	} else {
		click $elems[0];
		wait_for_elem $lock_button;
		$need_lock = 1; # TODO DS
	}
	last;
}

sub privacy_button {
	my $set = shift;
	return "form input[type='submit'][name='$set-privacy']";
}
if (not $uk and not $privacy_match) {
	navigate "$home/privacy";
	my $want = whois 'privacy';
	my $old = $want ? 'disable' : 'enable';
	my $new = $want ? 'enable' : 'disable';
	notice "whois privacy $old -> $new";
	if (not_really) {
		# check for expected button
		elem privacy_button $new;
		notice "not really!";
	} else {
		click privacy_button $new;
		wait_for_elem privacy_button $old;
	}
}


sub wait_for_alert_success {
	wait_for_elem 'p.alert';
	my $msg = elem_text 'p.alert';
	$msg =~ s{[^!-~]+}{ }g;
	$msg =~ s{^\s+}{};
	$msg =~ s{\s+$}{};
	if (has_elem 'p.alert-success') {
		verbose $msg;
	} else {
		error $msg;
	}
}


unless ($contacts_match) {
	fettle_contacts 'noisy';
	if (not_really) {
		notice "not really!";
	} else {
		click "form input[type='submit'][value='Update']";
		wait_for_alert_success;
	}
}


unless ($ns_match) {
	navigate "$home/nameservers";
	my @new_ns = new_ns;
	for (my $i = 0; ; $i++) {
		my $elem_ns = elem "form input[name='ns$i']";
		my $elem_ip = elem "form input[name='ip$i']";
		my $new_ns = shift @new_ns // '';
		my $new_ip = shift @new_ns // '';
		my $old_ns = elem_value $elem_ns;
		my $old_ip = elem_value $elem_ip;
		last if not $old_ns and not $new_ns;
		next if $old_ns eq $new_ns
		    and $old_ip eq $new_ip;
		notice "$old_ns $old_ip -> $new_ns $new_ip";
		fill $elem_ns => $new_ns, $elem_ip => $new_ip;
	}
	if (not_really) {
		notice "not really!";
	} else {
		click "form input[type='submit'][value='Set nameservers']";
		wait_for_alert_success;
	}
}


if ($can_dnssec and not $ds_match) {
	navigate "$home/dnssec";
	my $form = elem { xpath =>
	    '//h2[contains(text(),"Configure new manual DS key")]/../form'
        };
	# TODO: Workaround for missing DS records: re-read the current
	# DS records since they might have not have been available
	# when we first checked. We will fail if we try to re-add an
	# existing DS record, so the %old_ds list needs to be correct.
	for my $tr (elems { xpath => $old_ds_tr }) {
		my $ds = old_ds_tr $tr;
		$old_ds{$ds->rdstring} = ();
	}
	for my $ds (new_ds) {
		next if exists $old_ds{$ds->rdstring};
		# append '' to coerce to string
		fill sub_elem($form, "input[name='keytag']") => ''.$ds->keytag,
		     sub_elem($form, "input[name='digest']") => $ds->digest;
		click sub_elem $form, sprintf "select[name='algorithm']".
		    " option[value='%s']", ''.$ds->algorithm;
		click sub_elem $form, sprintf "select[name='digesttype']".
		    " option[value='%s']", ''.$ds->digtype;
		notice_f "add %s", $ds->plain;
		if (not_really) {
			notice "not really!";
		} else {
			click sub_elem $form,
			    "button[type='submit'][value='add']";
			wait_for_alert_success;
		}
	}
	my $new_ds = new_ds;
	for my $tr (elems { xpath => $old_ds_tr }) {
		my $ds = old_ds_tr $tr;
		next if exists $new_ds->{$ds->rdstring};
		notice_f "del %s", $ds->plain;
		if (not_really) {
			notice "not really!";
		} else {
			click sub_elem $tr,
			    "input[type='submit'][value='delete']";
			wait_for_alert_success;
		}
	}
}


# TODO: The $need_lock checks can be removed when the web site is
# fixed to show us the current DS records when the domain is locked.
if (not $uk and not $eu and whois('lock') || 1 || $need_lock) {
	navigate "$home/auth-lock";
	notice "locking registration";
	if (not_really and not $need_lock) {
		notice "not really!";
	} else {
		click $lock_button;
		wait_for_elem $unlock_button;
	}
}


navigate 'https://www.mythic-beasts.com/user/logout';
exit 0;
