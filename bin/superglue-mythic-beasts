#!/usr/bin/perl

use strictures 2;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Superglue qw( :script :webdriver );

#navigate 'https://www.mythic-beasts.com/user/logout';

#navigate 'https://www.mythic-beasts.com/user/login';

my $login = '#login-form button[type="submit"]';
if (has_elem $login) {
	fill
	    '#ident' => login('ident'),
	    '#password' => login('password');
	# allow unrestricted / floating IP address
	click elem '#floating-1';
	click $login;
}

my $home = 'https://ctrlpanel.mythic-beasts.com/customer/domains/'.zone;
sub go_home {
	navigate $home;
	wait_for sub {
		my $title = page_title;
		error "navigation failed"
		    if $title eq 'Error - Mythic Beasts';
		return $title eq zone." - Mythic Beasts";
	};
}
go_home;

my $status = elem_text 'div.section.top-section :nth-child(3)';
error "domain is not currently registered"
    unless $status =~ m{status\s+registered}i;

# Although the domain summary page has most of the information we
# need, the fields are not labelled in a convenient way. For contact
# and delegation details it is easier to go straight to filling in the
# forms, and we can report any discrepancies as we find them.
#
# The main problem with this is the registry lock for non-UK domains:
# we don't want to disable it if we don't need to. So for locked
# domains that need changes we go through the process twice: first to
# find out that changes are required, then after unlocking the domain,
# again to actually make the changes. The first stage can be skipped
# if the domain is already unlocked, and the second can be skipped if
# no changes are needed.

my $unlocked = 1;
my $lock_match = 1;
my $priv_match = 1;
my $reg_match = 1;
my $ns_match = 1;
my $ds_match = 1;

for (;;) {
	if (has_elem { 'partial link text' => 'Domain locking' }) {
		my $lock_state = elem_text { 'xpath' =>
			'//h2[text()="Transfer away"]/..'.
			'/p[contains(text(),"Domain is")]/b'
		};
		$unlocked = $lock_state eq 'unlocked';
	}

	if (has_elem { 'partial link text' => 'Domain privacy' }) {
		my $priv_state = elem_text { 'xpath' =>
			'//h2[text()="Contacts"]/..'.
			'/p[contains(text(),"Domain privacy is")]/b'
		};
		my $priv_want = whois('privacy') ? 'enabled' : 'disabled';
		if ($priv_state ne $priv_want) {
			$priv_match = 0;
			notice "privacy $priv_state -> $priv_want"
			    if not_really or $unlocked;
			if (not_really) {
				notice "not really!";
			} elsif ($unlocked) {
				navigate "$home/privacy";
				$priv_want =~ s/d$//;
				click "form input[type='submit']".
				    "[name='$priv_want-privacy']";
			}
		}
	}

	navigate "$home/contacts";

	my $uk = zone =~ m{\.uk$};
	my @contact = $uk ? qw(registrant) : qw(owner admin billing tech);
	my @field = $uk ? qw(
		org name street0 street1 street2
		city sp pc cc voice email
	) : qw(
		first last org phone fax email
		add1 add2 add3 city county postcode country
	);

	for my $contact (@contact) {
		for my $field (@field) {
			my $old;
			my $new = whois $field;
			my $elem = "#${contact}_${field}";
			if ($field eq 'country' or $field eq 'cc') {
				$old = elem_attr
				    "$elem option[selected]", 'value';
			} else {
				# no need to find the element twice
				$elem = elem $elem;
				$old = elem_attr $elem, 'value';
			}
			next if $old eq $new;
			$reg_match = 0;
			notice "$field $old -> $new"
			    if not_really or $unlocked;
			if ($uk and $field eq 'org') {
				warning_f "this must be fixed via Nominet";
			} elsif ($field eq 'country'or $field eq 'cc') {
				click "$elem option[value='$new']";
			} else {
				fill $elem => $new;
			}
		}
	}
	if ($reg_match) {
		verbose "contacts match";
	} elsif (not_really) {
		notice "not really!";
	} elsif ($unlocked) {
		click "form input[type='submit'][value='Update']";
	}

	navigate "$home/nameservers";
	my @new_ns = new_ns;
	for (my $i = 0; @new_ns; $i++) {
		my $elem_ns = elem "form input[name='ns$i']";
		my $elem_ip = elem "form input[name='ip$i']";
		my $new_ns = shift @new_ns;
		my $new_ip = shift @new_ns;
		my $old_ns = elem_attr $elem_ns, 'value';
		my $old_ip = elem_attr $elem_ip, 'value';
		next if $old_ns eq $new_ns
		    and $old_ip eq $new_ip;
		$ns_match = 0;
		notice "$old_ns $old_ip -> $new_ns $new_ip"
		    if not_really or $unlocked;
		fill $elem_ns => $new_ns, $elem_ip => $new_ip;
	}
	if ($ns_match) {
		verbose "nameservers match";
	} elsif (not_really) {
		notice "not really!";
	} elsif ($unlocked) {
		click "form input[type='submit'][value='Set nameservers']";
	}

	navigate "$home/dnssec";
	# DS

	exit if not_really;

	my $all_match = $priv_match && $reg_match && $ns_match && $ds_match;

	# we needed to make a change but we couldn't, so unlock and re-do
	if (not $unlocked and not $all_match) {
		navigate "$home/auth-lock";
		click "form input[type='submit'][value='unlock']";
		go_home;
		next;
	}

	if ($unlocked and 'no' ne whois 'lock') {
		navigate "$home/auth-lock";
		click "form input[type='submit'][value='lock']";
		go_home;
	}

	exit;
}

exit;
