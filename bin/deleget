#!/bin/sh
#
# Written by Tony Finch <dot@dotat.at> <fanf2@cam.ac.uk>
# at Cambridge University Information Services
# You may do anything with this. It has no warranty.
# http://creativecommons.org/publicdomain/zero/1.0/

set -e

usage() {
	echo 1>&2 "usage: deleget [-ARlm] [-a auth] [-r rec] [-s ns] <domain>"
	echo 1>&2 "	-A		Use only authoritative queries"
	echo 1>&2 "	-R		Use only recursiveive queries"
	echo 1>&2 "	-l		Send auth queries to localhost"
	echo 1>&2 "	-m		Auth queries to zone's primary master"
	echo 1>&2 "	-a auth		Server for authoritative queries"
	echo 1>&2 "	-r rec		Server for recursive queries"
	echo 1>&2 "	-s ns		Server for all queries"
	echo 1>&2 ""
	echo 1>&2 "The deleget program prints a DNS zone's delegation records"
	echo 1>&2 "(NS, DS, and glue addresses) in standard master file format."
	exit 1
}

amode='+norec'
rmode='+recurse'
master=false

while getopts 'ARlma:r:s:' opt
do	case $opt in
	(A)	amode='+norec'
		rmode='+norec'
		;;
	(R)	amode='+recurse'
		rmode='+recurse'
		;;
	(l)	auth='@localhost'
		;;
	(m)	master=true
		;;
	(a)	auth="@$OPTARG"
		;;
	(r)	rec="@$OPTARG"
		;;
	(s)	auth="@$OPTARG"
		rec="@$OPTARG"
		;;
	(*)	usage
		;;
	esac
done
shift $(($OPTIND - 1))
case $# in
(1)	zone=$(echo $1 | sed 's/\.*$/./')
	;;
(*)	usage
	;;
esac

s='[ 	][ 	]*'

p() {
	printf "%s" "$*"
}
pn() {
	case "$*" in
	('')	;;
	(*)	p "$*"
		echo
	esac
}

nodata_error=true

digerr() {
	echo 1>&2 "deleget: $2 error from dig $1"
	exit 1
}

digit() {
	eval type='$'$#
	out=$(dig +noall +comments +answer "$@")
	status=$(p "$out" |
		 sed '/.* opcode: QUERY, status: /!d;s///;s/,.*//')
	if	[ "$status" != "NOERROR" ]
	then	digerr "$*" "$status"
	elif	p "$out" | sed "/^;/d;/^\$/d;s/[0-9]*${s}IN/IN/" |
		sort | grep "${s}IN${s}${type}${s}"
	then	return 0
	elif	$nodata_error
	then	digerr "$*" NODATA
	else	return 1
	fi
}

rdig="digit $rmode $rec"

if	$master
then	soa=$($rdig "$zone" SOA)
	mname=$(p "$soa" | awk '{ print $4 }')
	auth="@$mname"
fi

adig="digit $amode $auth"

NS=$($adig "$zone" NS)

nodata_error=false

gluere=$(echo "$zone" | sed 's/^/(^|\.)/;s/\./\\./g;s/$/$/')
GLUE=$($adig "$zone" NS | sed "s/.*${s}IN${s}NS${s}//" | egrep "$gluere" |
while read ns
do	$rdig "$ns" A    || true
	$rdig "$ns" AAAA || true
done)

if	DNSKEY=$($adig "$zone" DNSKEY | grep "${s}IN${s}DNSKEY${s}257${s}")
then
	DS=$(	(echo '$TTL 3600'; p "$DNSKEY"; echo) |
		dnssec-dsfromkey -2 -f /dev/stdin "$zone")
fi

pn "$NS"
pn "$GLUE"
pn "$DNSKEY"
pn "$DS"
