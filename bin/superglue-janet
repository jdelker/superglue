#!/usr/bin/perl

use warnings;
use strict;

use LWP::UserAgent;
use JSON;
use File::Slurp;
use POSIX;

use FindBin;
use lib "$FindBin::Bin/../lib/superglue/perl5";

use Deep;
use WebDriver;

my $notreally = 1;

my @wd_opts = (
	reconnect => 1,
	retain => 1,
	foreground => 1,
	verbose => 1,
    );

if (@ARGV == 2) {
	push @wd_opts, session => shift;
}

webdriver_init @wd_opts;

die "usage: $0 [session] <credfile>\n"
    unless @ARGV == 1;

my $credfile = shift;
my $creds = read_file $credfile;
$creds =~ m{^([^:]+):(.*)\n*$}
    or die "could not parse username:password from $credfile\n";
$creds = { username => $1, password => $2 };

my $domain = 'ucam.ac.uk';

my $registrant = {
	Name => 'Cambridge University Hostmaster',
	Tel => '+44 1223 748440',
	Email => 'hostmaster@cam.ac.uk',
	Fax => '',
	Add1 => 'Cambridge University Information Services',
	Add2 => 'Roger Needham Building',
	Add3 => '7 JJ Thomson Avenue',
	Town => 'Cambridge',
	County => '',
	Postcode => 'CB3 0RB'
    };

my $new = {
	NS => [
		# { 'authdns0.csx.cam.ac.uk' => '' },
		# { 'authdns1.csx.cam.ac.uk' => '' },
		# { 'sns-pb.isc.org' => '' },
		{ 'auth0.dns.cam.ac.uk' => '' },
		{ 'auth1.dns.cam.ac.uk' => '' },
		{ 'sns-pb.isc.org' => '' },
#		{ 'ns1.mythic-beasts.com' => '' },
#		{ 'ns2.mythic-beasts.com' => '' },
#		{ 'ns3.mythic-beasts.com' => '' },
	    ],
	DS => [
		'47650 8 2 17EFBE87DEC9AC62D88291F4DB0AF13D84B94B73A11293892414541112FC52B4',
		'47961 13 2 5B00A0A0F520F98B4670D156D759B6BB23E1C4A1C41C0ABF94712B79795DDEFF',
	    ],
};

########################################################################

sub trim {
	# trim table header and footer
	my $rows = shift;
	return [ splice @$rows, 1, -1 ];
}

navigate 'https://domainregistry.jisc.ac.uk/dns';

my $login = '#MainContent_Login1_LoginButton';
if (has_elem $login) {
	fill
	    '#MainContent_Login1_UserName' => $creds->{username},
	    '#MainContent_Login1_Password' => $creds->{password};
	click $login;
}

# Count open tickets to ensure we do not have too many pending
# modifications, for conformance with JISC's terms of use
# (because they review modifications manually).

click '#MainContent_ListPendingTickets';

# This causes an async page reload so we have to wait for it to complete.

fill '#MainContent_TicketListView_PerPageDropDownList' => '50';
wait_for sub {
    not has_elem '#MainContent_TicketListView_PaginationControl_LinkButton1_1'
    and has_elem '#MainContent_TicketTypeChoice';
};

fill '#MainContent_TicketTypeChoice' => 'Modification';
click '#MainContent_FilterSubmit';

my $tickets = trim elems '#MainContent_TicketListView tr';
die "cannot modify $domain: too many open tickets\n"
    if @$tickets >= 10;

# Look for any open tickets for this domain
# to avoid having multiple modifications in flight.

fill '#MainContent_TicketTypeChoice' => '',
    '#MainContent_DomainFilterInput' => $domain;
click '#MainContent_FilterSubmit';

die "cannot modify $domain: ticket open\n"
    if has_elem '#MainContent_TicketListView_CurrentPageLabel';

# Find the domain's details page.

click '#commonActionsMenuLogin_ListDomains';

fill '#MainContent_tbDomainNames' => $domain,
    '#MainContent_ShowReverseDelegatedDomains' => 'selected';

click '#MainContent_btnFilter';

# This domain might be a suffix of another domain (e.g. cam.ac.uk vs
# ucam.ac.uk) so we might have more than one result. The domain name
# and the link to its information page are in different columns.

my $domains = trim elems '#MainContent_DomainListView tr';
for my $row (@$domains) {
	next unless $domain
	    eq lc elem_text sub_elem $row, 'td:nth-child(4)';
	click sub_elem $row, 'td:nth-child(2) > a'
}

die "cannot modify $domain: not found\n"
    unless has_elem '#MainContent_DomainName'
    and $domain eq lc elem_text '#MainContent_DomainName';

# Check the registrant details match.

# We apply a fuxup here, because the element IDs on this page have a
# slightly different naming scheme from the elements on the domain
# modification form. We use the modification form as the canonical
# version of the names (kk = canonical key), and the fuxup converts
# them to the version on this page (fk).

my $fuxup = { 'Add1' => 'Add',
	      'Add2' => 'Add1',
	      'Add3' => 'Add2',
	      'Tel' => 'Phone',
	      'Postcode' => 'PostCode' };

my $reg_match = 1;

for my $kk (keys %$registrant) {
	my $id = '#MainContent_registrantSectionView_registrant_Reg';
	my $fk = $fuxup->{$kk} // $kk;
	my $t = elem_text $id.$fk;
	next if $t eq $registrant->{$kk};
	printf "Modify %s %s -> %s\n",
	    $kk, $t, $registrant->{$kk};
	$reg_match = 0;
}

my $old;

my $oldns = elems '#MainContent_nameServersTab tr';
shift @$oldns; # remove header (no footer on this table)
for my $row (@$oldns) {
	my $ns = elem_text sub_elem $row, 'td:nth-last-child(2)';
	my $ip = elem_text sub_elem $row, 'td:nth-last-child(1)';
	push @{ $old->{NS} }, { $ns => $ip };
}

my $ns_match = deepeq $old->{NS}, $new->{NS};
unless ($ns_match) {
	print "delegations differ\n";
	print "old delegation\n";
	printf "\t%s %s\n", keys %$_, values %$_ for @{ $old->{NS} };
	print "new delegation\n";
	printf "\t%s %s\n", keys %$_, values %$_ for @{ $new->{NS} };
}

my $new_ds = '';
for my $ds (@{ $new->{DS} }) {
	$new_ds .= "$domain. IN DS $ds\n";
}

my $old_ds = elem_text '#MainContent_DsKeysDisplay';
$old_ds =~ s{\s*$}{\n};
my $ds_match = $old_ds eq $new_ds;
# ignore DS records in reverse DNS zones, because they are unsigned
$ds_match ||= $domain =~ m{\.arpa$};
unless ($ds_match) {
	print "DS records differ\n";
	print "old records\n";
	print $old_ds;
	print "new records\n";
	print $new_ds;
}

exit if $reg_match and $ns_match and $ds_match;

click '#MainContent_ModifyDomainButton';

# Fill the page from top to bottom, to make the script
# easier to watch when not in headless mode.

# disable dual hidden / public whois
click '#MainContent_Registrant_useSharedRegistrantDetailsRadioButton';

for my $k (keys %$registrant) {
	my $id = '#MainContent_Registrant_registrant_Reg';
	fill $id.$k => $registrant->{$k};
}

# ensure there are enough name server form elements

my $num_ns = scalar @{ $new->{NS} };
fill '#MainContent_Nameservers_NumberOfNonJanetSecondaries'
    => ''.($num_ns - 1);
wait_for sub {
    has_elem '#MainContent_Nameservers_SecName'.($num_ns - 2)
};

# disable any JANET nameserver options

fill '#MainContent_Nameservers_UseJanetPrimaryNs1' => 'No';
wait_for sub {
    has_elem '#MainContent_Nameservers_PrimeNameserverName';
};

for my $i (0..3) {
	my $id = '#MainContent_Nameservers_JSec_CheckBoxList_'.$i;
	click $id if elem_selected $id;
}

# now we can fill the nameserver fields

fill '#MainContent_Nameservers_PrimeNameserverName'
    => keys %{ $new->{NS}->[0] },
    '#MainContent_Nameservers_PrimeNameserverIp'
    => values %{ $new->{NS}->[0] };
for my $i (0 .. $num_ns - 2) {
	fill '#MainContent_Nameservers_SecName'.$i
	    => keys %{ $new->{NS}->[$i+1] },
	    '#MainContent_Nameservers_SecIp'.$i
	    => values %{ $new->{NS}->[$i+1] };
}

fill '#MainContent_DsKeys_DsKeyTabContainer_DsPasteTab_DsKeyText',
    => $new_ds;

my $modwhen_id = '#MainContent_ModificationDate_Modification';

sub schedule {
	my $time = shift;
	my $date = shift;
	# Something weird is happening here. Filling the "time"
	# drop-down menu seems to toggle it, rather than setting the
	# value, so we loop to make sure it has been set properly.
	fill $modwhen_id.'Time' => $time
	    while $time ne elem_text($modwhen_id.'Time option:checked');
	fill $modwhen_id.'DateCalendar' => $date;
}

my $times = elems $modwhen_id.'Time option';
# Assume the times are in order from early to late. Schedule for
# first thing tomorrow in case we can't find a time later today.
schedule elem_text($times->[0]),
    strftime "%d/%m/%Y", localtime time + 86400;
# Override the schedule with a time later today, if we find one.
my $now = strftime "%H:%M", localtime;
for my $opt (@$times) {
	my $time = elem_text $opt;
	next if $now ge $time;
	schedule $time, strftime "%d/%m/%Y", localtime;
	last;
}

printf "modification scheduled for %s %s\n",
    elem_prop($modwhen_id.'DateCalendar', 'value'),
    elem_text($modwhen_id.'Time option:checked');

if ($notreally) {
	print "not really!\n";
} else {
	click '#MainContent_ConfirmRequest';
	if (has_elem '#MainContent_SubmissionText') {
		printf "%s\n", elem_text '#MainContent_SubmissionText';
		click '#commonActionsMenuLogin_menuLogout';
		exit;
    } else {
	    printf "%s\n", elem_text 'body';
	    die "Unexpected response after submbitting modification for $domain\n";
    }
}

exit;
