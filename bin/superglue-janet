#!/usr/bin/perl

=head1 NAME

superglue-janet - update ac.uk domain registrations

=head1 SYNOPSIS

superglue-janet [options]

See L<superglue(1)> for the common superglue options.

=cut

use strictures 2;
use warnings;

use FindBin;
use Net::DNS;
use POSIX qw(strftime);

use lib "$FindBin::Bin/../lib";

use Superglue qw( :script :webdriver );

# trim table header and footer
sub trim {
	return splice @_, 1, -1;
}

login_check qw(url username password);

navigate login 'url';

my $login = '#MainContent_Login1_LoginButton';
if (has_elem $login) {
	fill
	    '#MainContent_Login1_UserName' => login('username'),
	    '#MainContent_Login1_Password' => login('password');
	click $login;
}

# Count open tickets to ensure we do not have too many pending
# modifications, for conformance with JISC's terms of use
# (because they review modifications manually).

click '#MainContent_ListPendingTickets';

# This causes an async page reload so we have to wait for it to complete.

fill '#MainContent_TicketListView_PerPageDropDownList' => '50';
wait_for sub {
    not has_elem '#MainContent_TicketListView_PaginationControl_LinkButton1_1'
    and has_elem '#MainContent_TicketTypeChoice';
};

fill '#MainContent_TicketTypeChoice' => 'Modification';
click '#MainContent_FilterSubmit';

my @tickets = trim elems '#MainContent_TicketListView tr';
error_f "cannot modify %s: too many open tickets", zone
    if @tickets >= 10;

verbose_f "found %d open tickets", scalar @tickets;

# Look for any open tickets for this domain
# to avoid having multiple modifications in flight.

fill '#MainContent_TicketTypeChoice' => '',
    '#MainContent_DomainFilterInput' => zone;
click '#MainContent_FilterSubmit';

error_f "cannot modify %s: ticket already open", zone
    if has_elem '#MainContent_TicketListView_CurrentPageLabel';

# Find the domain's details page.

click '#commonActionsMenuLogin_ListDomains';

fill '#MainContent_tbDomainNames' => zone,
    '#MainContent_ShowReverseDelegatedDomains' => 'selected';

click '#MainContent_btnFilter';

# This domain might be a suffix of another domain (e.g. cam.ac.uk vs
# ucam.ac.uk) so we might have more than one result. The domain name
# and the link to its information page are in different columns.

my @domains = trim elems '#MainContent_DomainListView tr';
for my $row (@domains) {
	next unless zone eq lc elem_text sub_elem $row, 'td:nth-child(4)';
	click sub_elem $row, 'td:nth-child(2) > a';
	last;
}

error_f "cannot modify %s: not found", zone
    unless has_elem '#MainContent_DomainName'
    and zone eq lc elem_text '#MainContent_DomainName';

# Check the registrant details match.

my $reg_match = 1;

if (has_contact) {

	my $org = elem_text '#MainContent_OwnerOrg';
	if ($org ne whois 'org') {
		warning_f 'mismatched owner: %s -> %s', $org, whois 'org';
		warning_f 'you must write a letter to JISC to fix this';
	}

	# We apply a fuxup here, because the element IDs on this page
	# have an naming scheme that is incompatible with the names
	# supported by Superglue::Contact. We use the modification
	# form as the canonical version of the names (kk = canonical
	# key), and the fuxup converts them to the version on this
	# page (fk).

	my $fuxup = { 'Add1' => 'Add',
		      'Add2' => 'Add1',
		      'Add3' => 'Add2' };

	for my $kk (qw(
		Name Phone Email Fax Add1 Add2 Add3 Town County PostCode
	)) {
		my $id = '#MainContent_registrantSectionView_registrant_Reg';
		my $fk = $fuxup->{$kk} // $kk;
		my $t = elem_text $id.$fk;
		next if $t eq whois $kk;
		notice_f "Modify %s %s -> %s",
		    $kk, $t, whois $kk;
		$reg_match = 0;
	}

}

my @old_ns = elems '#MainContent_nameServersTab tr';
shift @old_ns; # remove header (no footer on this table)
for my $row (@old_ns) {
	my $ns = elem_text sub_elem $row, 'td:nth-last-child(2)';
	my $ip = elem_text sub_elem $row, 'td:nth-last-child(1)';
	old_ns $ns, $ip;
}

my $old_ds = elem_text '#MainContent_DsKeysDisplay';
unless ($old_ds =~ m{no DS key}i) {
	for my $old_ds (split /\n/, $old_ds) {
		old_ds +Net::DNS::RR->new($old_ds);
	}
}

my $deleg_match = delegation_matches;

exit if $deleg_match and $reg_match;

click '#MainContent_ModifyDomainButton';

# Fill the page from top to bottom, to make the script
# easier to watch when not in headless mode.

# disable dual hidden / public whois
click '#MainContent_Registrant_useSharedRegistrantDetailsRadioButton';

if (has_contact) {
	for my $k (qw(
		Name Add1 Add2 Add3 Town County Postcode Email Tel Fax
	)) {
		my $id = '#MainContent_Registrant_registrant_Reg';
		fill $id.$k => whois $k;
	}
}

# ensure there are enough name server form elements

my @new_ns = new_ns;
my $num_ns = @new_ns / 2;
fill '#MainContent_Nameservers_NumberOfNonJanetSecondaries'
    => ''.($num_ns - 1);
wait_for_elem '#MainContent_Nameservers_SecName'.($num_ns - 2);

# disable any JANET nameserver options

fill '#MainContent_Nameservers_UseJanetPrimaryNs1' => 'No';
wait_for_elem '#MainContent_Nameservers_PrimeNameserverName';

for my $i (0..3) {
	my $id = '#MainContent_Nameservers_JSec_CheckBoxList_'.$i;
	click $id if elem_selected $id;
}

# now we can fill the nameserver fields

fill '#MainContent_Nameservers_PrimeNameserverName'
    => shift @new_ns,
    '#MainContent_Nameservers_PrimeNameserverIp'
    => shift @new_ns;
for my $i (0 .. $num_ns - 2) {
	fill '#MainContent_Nameservers_SecName'.$i
	    => shift @new_ns,
	    '#MainContent_Nameservers_SecIp'.$i
	    => shift @new_ns;
}

if (zone =~ m{\.arpa$}) {
	warning "DS records not supported for JANET reverse DNS";
} else {
	fill '#MainContent_DsKeys_DsKeyTabContainer_DsPasteTab_DsKeyText',
	    => join '', map "$_\n", map $_->plain, new_ds;
}

my $modwhen_id = 'MainContent_ModificationDate_Modification';
my $modwhen_time = "${modwhen_id}Time";
my $modwhen_date = "${modwhen_id}DateCalendar";
my $modwhen_label = "${modwhen_id}TimeLabel";

sub schedule {
	my $time = shift;
	my $date = shift;
	fill "#$modwhen_date" => $date;
	# Filling the calendar brings up a date picker which
	# covers the time selector, so we click a label that
	# isn't obscured to get the popup out of the way.
	click "#$modwhen_label";
	click { xpath => "//select[\@id='$modwhen_time']"
			."/option[text()='$time']" };
}

my @times = elems "#$modwhen_time option";
# Assume the times are in order from early to late. Schedule for
# first thing tomorrow in case we can't find a time later today.
schedule elem_text($times[0]),
    strftime "%d/%m/%Y", localtime time + 86400;
# Override the schedule with a time later today, if we find one.
my $now = strftime "%H:%M", localtime;
for my $opt (@times) {
	my $time = elem_text $opt;
	next if $now ge $time;
	schedule $time, strftime "%d/%m/%Y", localtime;
	last;
}

notice_f "modification scheduled for %s %s",
    elem_value("#$modwhen_date"),
    elem_text("#$modwhen_time option:checked");

if (not_really) {
	notice "not really!";
} else {
	click '#MainContent_ConfirmRequest';
	if (has_elem '#MainContent_SubmissionText') {
		notice elem_text '#MainContent_SubmissionText';
	} else {
		notice elem_text 'body';
		error "Unexpected response after submbitting modification";
	}
}

click '#commonActionsMenuLogin_menuLogout';
exit;
