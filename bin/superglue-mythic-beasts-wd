#!/usr/bin/perl

use warnings;
use strict;

use LWP::UserAgent;
use JSON;
use File::Slurp;
use POSIX;

use FindBin;
use lib "$FindBin::Bin/../lib/superglue/perl5";

use Deep;
use WebDriver;

my $notreally = 1;

my @wd_opts = (
	reconnect => 1,
	retain => 1,
	foreground => 1,
	verbose => 1,
    );

if (@ARGV == 3) {
	push @wd_opts, session => shift;
}

webdriver_init @wd_opts;

die "usage: $0 [session] <credfile> <domain>\n"
    unless @ARGV == 2;

my $credfile = shift;
my $creds = read_file $credfile;
$creds =~ m{^([^:]+):(.*)\n*$}
    or die "could not parse username:password from $credfile\n";
$creds = { username => $1, password => $2 };

my $domain = shift;

my $registrant = {
	first => 'Cambridge',
	last => 'Hostmaster',
	org => 'University of Cambridge',
	phone => '+44.1223748440',
	fax => '',
	email => 'hostmaster@cam.ac.uk',
	add1 => 'Cambridge University Information Services',
	add2 => 'Roger Needham Building',
	add3 => '7 JJ Thomson Avenue',
	city => 'Cambridge',
	county => 'Cambridgeshire',
	postcode => 'CB3 0RB',
	country => 'GB',
    };

# registrant attributes in order (non-uk)
my @reg_attr = qw( first last org phone fax email
		   add1 add2 add3 city county postcode country );

my $new = {
	NS => [
		# { 'authdns0.csx.cam.ac.uk' => '' },
		# { 'authdns1.csx.cam.ac.uk' => '' },
		# { 'sns-pb.isc.org' => '' },
		{ 'auth0.dns.cam.ac.uk' => '' },
		{ 'auth1.dns.cam.ac.uk' => '' },
		{ 'sns-pb.isc.org' => '' },
#		{ 'ns1.mythic-beasts.com' => '' },
#		{ 'ns2.mythic-beasts.com' => '' },
#		{ 'ns3.mythic-beasts.com' => '' },
	    ],
	DS => [
		'47650 8 2 17EFBE87DEC9AC62D88291F4DB0AF13D84B94B73A11293892414541112FC52B4',
		'47961 13 2 5B00A0A0F520F98B4670D156D759B6BB23E1C4A1C41C0ABF94712B79795DDEFF',
	    ],
};

########################################################################

sub trim {
	# trim table header and footer
	my $rows = shift;
	return [ splice @$rows, 1, -1 ];
}

navigate 'https://www.mythic-beasts.com/user/logout';

navigate 'https://www.mythic-beasts.com/user/login';

my $login = '#login-form button[type="submit"]';
if (has_elem $login) {
	fill
	    '#ident' => $creds->{username},
	    '#password' => $creds->{password};
	click elem { 'xpath' => '//label/div[text()="Unrestricted"]' };
	click $login;
}

my $domctrl = "https://ctrlpanel.mythic-beasts.com/customer/domains/$domain";
sub go_home {
	navigate $domctrl;
	wait_for sub {
		my $title = page_title;
		die "navigation failed"
		    if $title eq 'Error - Mythic Beasts';
		return $title eq "$domain - Mythic Beasts";
	};
}
go_home;

sub xfer_lock {
	my $want = shift;
	return unless elem { 'partial link text' => 'Domain locking' };
	my $lock_state = elem_text { 'xpath' => '//p[contains(text(),"Domain is")]/b' };
	return if $lock_state eq "${want}ed";
	navigate "$domctrl/auth-lock";
	click "form input[type='submit'][value='$want']";
	go_home;
}

my $reg_ok = join "\n",
    grep { defined $_ and $_ ne "" }
    @$registrant{@reg_attr};
my $reg_match = 1;

for my $contact ('Registrant:', 'Admin contact:',
		 'Billing contact:', 'Technical contact:') {
	my $reg_data = elem_text {
		xpath => '//div/b[text()="Registrant:"]/following-sibling::ul'
	};
	if ($reg_data ne $reg_ok) {
		$reg_data =~ s{\n}{ | }g;
		$reg_ok =~ s{\n}{ | }g;
		print "MISMATCH $contact\n$reg_data\n$reg_ok\n";
		$reg_match = 0;
	}
}
unless ($reg_match) {
	xfer_lock "unlock";
	navigate "$domctrl/contacts";
	for my $attr (@reg_attr) {
		my $elem = "#owner_${attr}";
		my $val = $registrant->{$attr};
		if ($attr eq 'country') {
			click "$elem option[value='$val']";
		} else {
			fill $elem => $val;
		}
	}
	for my $contact (qw(admin billing tech)) {
		js_sync "copy_contacts_to_$contact('owner')";
	}
	click "form input[type='submit'][value='Update']";
	go_home;
}

xfer_lock "lock";

my $priv_link = elem { 'link text' => 'Domain Privacy' };
my $priv_blurb = elem { 'xpath' => '//p[contains(text(),"Domain privacy is")]/b' };
if ($priv_link and $priv_blurb) {
	my $priv_state = elem_text $priv_blurb;
	unless ($priv_state eq 'disabled') {
		print "DOMAIN PRIVACY IS $priv_state\n";
		die "XXX TODO";
	}
}

exit;
