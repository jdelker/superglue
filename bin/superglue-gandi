#!/usr/bin/perl

use FindBin;
use lib "$FindBin::Bin/../lib/superglue/perl5";

use Data::Dumper;
use ScriptDie;
use Superglue;
use XML::RPC;

my %opt = Superglue::getopt;
my %creds = Superglue::load_kv $opt{creds};
my %d = Superglue::read_delegation $opt{zone};

my $r;
my $api = XML::RPC->new($creds{url});

sub api_get {
	my $method = shift;
	$r = $api->call($method, $creds{apikey}, $opt{zone});
	sdie "$opt{zone} $method: $r->{faultString}"
	    if ref $r eq HASH and $r->{faultString};
	return $r;
}

if ($d{NS}) {
	my @ns = @{api_get('domain.info')->{nameservers}};
	my $ns_match = @ns == @{$d{NS}};
	for my $i (0 .. $#ns) {
		debug "$opt{zone} NS $ns[$i]";
		$ns_match = 0 if $ns[$i] ne $d{NS}[$i];
	}
	debug "NS match?", $ns_match ? 'yes' : 'no';
	my @glue = @{api_get('domain.host.list')};
	my $glue_match = @glue == scalar keys %{$d{glue}};
	my @del;
	for my $ns (sort { $a->{name} cmp $b->{name} } @glue) {
		my $name = $ns->{name};
		$glue_match = 0 unless $d{glue}{$name};
		my @a = sort @{$ns->{ips}};
		for my $i (0 .. $#a) {
			debug "$ns A $a[$i]"    if $a[$i] =~ $Superglue::re_ipv4;
			debug "$ns AAAA $a[$i]" if $a[$i] =~ $Superglue::re_ipv6;
			$glue_match = 0 if exists $d{glue}{$name}
			    and $a[$i] ne $d{glue}{$name}[$i];
		}
		push @del, $name unless exists $d{glue}{$name};
	}
	debug "glue match?", $glue_match ? 'yes' : 'no';
	if ($ns_match and $glue_match) {
		verbose "$opt{zone}: name server delegation matches";
	} else {
	}
}
if ($d{DNSKEY}) {
	my (%add,%del);
	for my $key (@{$d{DNSKEY}}) {
		$key =~ m{^(\d+) 3 (\d+) (.*)$}
		    or sdie "$opt{zone}: cannot parse DNSKEY $key";
		my $f = $1;
		my $a = $2;
		my $pk = $3;
		$pk =~ s{ }{}g;
		$add{"$f $a $pk"} = { flags => $1, algorith => $2, public_key => $pk };
	}
	my @key = @{api_get('domain.dnssec.list')};
	debug sprintf "got %d input keys", scalar keys %add;
	debug sprintf "got %d existing keys", scalar @key;
	for my $i (0 .. $#key) {
		$key[$i]{public_key} =~ s{ }{}g;
		my $f = $key[$i]{flags};
		my $a = $key[$i]{algorithm};
		my $pk = $key[$i]{public_key};
		$del{"$f $a $pk"} = $key[$i]
		    unless delete $add{"$f $a $pk"};
		debug "$opt{zone} DNSKEY $key->{flags} 3 $key->{algorithm} $key->{public_key}";
	}
	my $nadd = scalar keys %add;
	my $ndel = scalar keys %del;
	debug "got $nadd keys to add";
	debug "got $ndel unwanted keys";
	my $key_match = $ndel == 0 && $nadd == 0;
	debug "key match?", $key_match ? 'yes' : 'no';
	if ($key_match) {
		verbose "$opt{zone}: secure delegation matches";
	} else {
	}
}

__END__

=head1 NAME

superglue-gandi - synchronize DNS delegation with Gandi

=head1 SYNOPSIS

B<superglue-gandi> [B<--debug>|B<-d>] [B<--verbose>|B<-v>]
    [B<--not-really>|B<-n>] B<--creds>=I<file>|B<-c>I<file> I<domain>

B<superglue-gandi> B<-h>|B<--help>

=head1 DESCRIPTION

