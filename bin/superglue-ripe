#!/usr/bin/perl

=head1 NAME

superglue-ripe - update domain registrations at RIPE

=head1 SYNOPSIS

superglue-ripe [options]

See L<superglue(1)> for the common superglue options.

=head1 DESCRIPTION

The RIPE-NCC handles reverse DNS for network allocations in Europe
and the Middle East.

=head2 Login credentials

All that is required is a C<password> field, which can authenticate
one of the domain object's C<mnt-by> users in the RIPE database.

=head2 Contact details

The B<superglue-ripe> script is not able to update contact details,
and will raise an error when invoked with the C<--contact> option.

Unlike most domain registries (which include a complete copy of the
contact details with each registration) the RIPE whois database has a
structure with contact details in separate objects that are referred
to indirectly by domain (and other) objects. This means that there is
much less of a problem with contact details getting accidentally out
of sync, and no need for bulk updates of contact details.

=head2 Delegation restrictions

Name servers for zones in the reverse DNS must not have names in the
reverse DNS. For example, the name servers for C<2.0.192.in-addr.arpa>
must have names like C<ns1.example.com> not names like
C<ns1.2.0.192.in-addr.arpa>. The B<superglue-ripe> script will raise
an error if the delegation would require glue records.

When you update a domain in the RIPE database, the new delegation is
checked with L<Zonemaster(3pm)> and the update is rejected if the
checks do not pass.

=head2 Performance and reliability

The Zonemaster checks are very slow which causes problems with
request timeouts.

The B<superglue-ripe> script uses a retry loop, repeating the
fetch-compare-update sequence until the RIPE database matches the
desired delegation, or there is an error other than a timeout. It
gives up after 5 attempts. The maximum client-side timeout for each
attempt is 3 minutes.

As of late 2019 we have found that an update takes a couple of
attempts, and each attempt times out on the server side after 1
minute. The second attempt is able to report errors arising from the
first update attempt.

=head2 Not-really mode

Although the RIPE REST API has a C<dry-run> parameter, the timeout
problems mean that it swallows errors so it is not useful.

In C<--not-really> mode, the B<superglue-ripe> script prints what the
new domain object should look like after an update, instead of trying
to perform the update.

=head2 Choice of API

There are several ways of accessing the RIPE database.

The B<superglue-ripe> script first gets the current state of a
domain's delegation from the database. The only way to do this over a
secure channel is using the REST API, which returns database objects
in elaborate XML or JSON forms. Superglue uses the JSON version.

For updates, B<superglue-ripe> also uses the REST API. (Another option
is to use C<syncupdates> that accepts objects in C<whois> format. This
is simpler and might be preferable if it were possible to get objects
in whois format securely.)

=cut

use warnings;
use strict;

use Data::Compare;
use FindBin;
use HTTP::Date;
use URI::Escape;

use lib "$FindBin::Bin/../lib";

use Superglue qw(:script :restful);

login_check qw(password);
require_glueless;

error "RIPE domains do not have normal contact information"
    if has_contact;

# When the server times out it returns an HTML response which needs
# separate handling wrt the normal JSON responses.

my $ignore_timeout = sub {
	my $r = shift;
	return ("response is not JSON" => $r->content)
	    unless $r->status_line =~ m{502 Proxy Error}
	    and str2time($r->headers->header('date')) + 50
	      < str2time($r->headers->header('client-date'));
	return;
};

# Extracting error messages from the RIPE REST API is rather
# complicated.

json_error sub {
	my $json = shift;
	my @error;
	for my $e (@{ $json->{errormessages}->{errormessage} }) {
		my $text = $e->{text};
		$text =~ s/%[ds]/$_->{value}/ for @{ $e->{args} };
		push @error, $text;
	}
	chomp @error;
	return join "\n", @error;
};

# Common debug logging and superficial checks.

sub ripe_object {
	my $json = shift;
	my @attr = @{ $json->{objects}->{object}
		  ->[0]->{attributes}->{attribute} };
	error "could not find expected zone in RIPE response"
	    unless Compare $attr[0],
	    { name => 'domain', value => zone };
	for my $a (@attr) {
		# strip extraneous bumf
		delete $a->{link};
		delete $a->{'referenced-type'};
		debug join ': ', @$a{qw{name value}};
	}
	return @attr;
}

base_uri 'https://rest.db.ripe.net/ripe/domain/'.zone;

for (my $attempt = 1; ; $attempt++) {

	# Disable the timeout handler when retrying.
	http_error 0;

	my @old = ripe_object GET '?unfiltered';

	for my $a (@old) {
		old_ns $a->{value} if $a->{name} eq 'nserver';
		old_ds $a->{value} if $a->{name} eq 'ds-rdata';
	}

	if (delegation_matches) {
		notice "delegation matches after $attempt tries"
		    if $attempt > 1;
		exit;
	}

	my @new = ();
	for my $a (@old) {
		push @new, $a unless $a->{name} eq 'nserver'
				  or $a->{name} eq 'ds-rdata';
	}
	for my $ns (sort keys %{new_ns()}) {
		push @new, { name => 'nserver', value => $ns };
	}
	for my $ds (sort keys %{new_ds()}) {
		push @new, { name => 'ds-rdata', value => $ds };
	}
	my $new = { objects  => { object    => [
		{ attributes => { attribute => \@new } } ] } };
	ripe_object $new;

	if (not_really) {
		notice "not really updating";
		exit;
	}

	my $password = uri_escape login()->{password};

	http_error $ignore_timeout;

	my $r = PUT "?password=$password", $new;

	if (defined $r) {
		ripe_object $r;
		notice "delegation updated";
		exit 0;
	} elsif ($attempt > 5) {
		error "giving up after $attempt tries";
		exit 1;
	} else {
		warning "update timed out, retrying";
	}
}

=head1 AUTHOR

Written by Tony Finch <fanf2@cam.ac.uk> <dot@dotat.at>
at Cambridge University Information Services.
L<https://opensource.org/licenses/0BSD>

=head1 SEE ALSO

L<superglue(1)>, L<Superglue(3pm)>, L<Superglue::Restful(3pm)>

RIPE database documentation,
L<https://www.ripe.net/support/documentation/ripe-database-documentation>

RIPE database REST API,
L<https://github.com/RIPE-NCC/whois/wiki/WHOIS-REST-API>
